/* 
  
*/
#include<AFMotor.h>
#include<ArduinoSTL.h>

AF_DCMotor motorL(1);
AF_DCMotor motorR(2);
bool right=0,left=1;
int t_for_90=60 ;
bool forward=1,backward=0;
int i,j,time_onestep;

String state;           //creating a reference variable

std::vector< std::vector<String> > room(1000,std::vector<String>(1000));	


void update(String &state,bool direction){   //used to update the orientation of the bot ONLY
  if(direction == left){
    if(state == "fr")
	state = "bc";
else if(state == "br")
	state ="fc";
else if(state == "fc")
state = "fr";
else state =  "br";		//state was bc
  }
  else{               //direction==right
    if(state == "fr")
	state = "fc";
else if(state == "br")
	state ="bc";
else if(state == "fc")
state = "br";
else state =  "fr";		//state was bc
  }
}

void turn(bool direction){
  if(direction == right){
    motorL.run(FORWARD);
    motorR.run(BACKWARD);
    delay(t_for_90);
    update(state,right);
    
  }
  else{                                   //direction== left
    motorL.run(BACKWARD);
    motorR.run(FORWARD);
    delay(t_for_90);
    update(state,left);
  }
}
void straight(bool x){
  if( x == forward ){
    motorL.run(FORWARD);
    motorR.run(FORWARD);
    delay(time_onestep);
     if(state == "fr"){
  	  j++;room[i-1][j]="w";}
else if(state == "br"){
	    j--;room[i+1][j]="w";}
else if(state == "fc"){
      i++;room[i][j+1]="w";}
else  {i--;room[i][j-1]="w";}  //state was bc
  room[i][j]="c";
  
  }
  else{                                   //x== backward
    motorL.run(BACKWARD);
    motorR.run(BACKWARD);
    delay(time_onestep);    //till the bot comes completely out ,and can take a right turn and proceed forward                                

     if(state == "fr"){
  	  room[i+1][j]="w";j--;}
else if(state == "br"){
	    room[i-1][j]="w";j++;}
else if(state == "fc"){
      room[i][j-1]="w";i--;}
else  {room[i][j+1]="w";i++;}  //state was bc
  room[i][j]="c";
  }
}
void stop(){
  motorL.run(RELEASE);
  motorR.run(RELEASE);
}

#include<NewPing.h>
#define SONAR_NUM     8 // Number of sensors.
#define MAX_DISTANCE 200 // Maximum distance (in cm) to ping.
#define PING_INTERVAL 33 // Milliseconds between sensor pings (29ms is about the min to avoid cross-sensor echo).
#define min_distance 20
bool R=0,L=0,F=0;
bool c[4]={false};

unsigned long pingTimer[SONAR_NUM]; // Holds the times when the next ping should happen for each sensor.
unsigned int cm[SONAR_NUM];         // Where the ping distances are stored.
uint8_t currentSensor = 0;          // Keeps track of which sensor is active.

NewPing sonar[SONAR_NUM] = {     // Sensor object array, 0,1,2,3-front sensors;4,5-left(back,front) sensors;6,7-right(back,front) sensors.
  NewPing(41, 41, MAX_DISTANCE), // Each sensor's trigger pin, echo pin, and max distance to ping.
  NewPing(43, 43, MAX_DISTANCE),
  NewPing(45, 25, MAX_DISTANCE),
  NewPing(21, 21, MAX_DISTANCE),
  NewPing(23, 23, MAX_DISTANCE),
  NewPing(25, 25, MAX_DISTANCE),
  NewPing(27, 27, MAX_DISTANCE),
  NewPing(29, 29, MAX_DISTANCE),
 };

void setup() {
  motorL.setSpeed(255);
  motorR.setSpeed(255);
  
  Serial.begin(115200);
  pingTimer[0] = millis() + 75;           // First ping starts at 75ms, gives time for the Arduino to chill before starting.
  for (uint8_t i = 1; i < SONAR_NUM; i++) // Set the starting time for each sensor.
    pingTimer[i] = pingTimer[i - 1] + PING_INTERVAL;
    
    i=i_init;
    j=j_init;
}

void loop() {
  for (uint8_t i = 0; i < SONAR_NUM; i++) { // Loop through all the sensors.
    if (millis() >= pingTimer[i]) {         // Is it this sensor's time to ping?
      pingTimer[i] += PING_INTERVAL * SONAR_NUM;  // Set next time this sensor will be pinged.
      if (i == 0 && currentSensor == SONAR_NUM - 1) oneSensorCycle(); // Sensor ping cycle complete, do something with the results.
      sonar[currentSensor].timer_stop();          // Make sure previous timer is canceled before starting a new ping (insurance).
      currentSensor = i;                          // Sensor being accessed.
      cm[currentSensor] = 0;                      // Make distance zero in c there's no ping echo for this sensor.
      sonar[currentSensor].ping_timer(echoCheck); // Do the ping (processing continues, interrupt will call echoCheck to look for echo).
    }
  }
  // Other code that *DOESN'T* analyze ping results can go here.
  decide();
  action(case_no(c));
  
}

void echoCheck() { // If ping received, set the sensor distance to array.
  if (sonar[currentSensor].check_timer())
    cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
}

void oneSensorCycle() { // Sensor ping cycle complete, do something with the results.
  // The following code would be replaced with your code that does something with the ping results.
  for (uint8_t i = 0; i <=3; i++) {
   if(cm[i] <= min_distance && cm[i] !=0 ) ::F=1;
   
  }
  if((cm[4] <= min_distance && cm[4]!=0) || (cm[5] <= min_distance && cm[5]!=0)) ::L=1;
  if((cm[6] <= min_distance && cm[6]!=0) || (cm[7] <= min_distance && cm[7]!=0)) ::R=1;
  
}

void decide() {
  
  if (L==0) c[0]=1;// no wall to the left- need to get wall back on left side.
  if (L==1 && F==0) c[1]=1;        // R doesnt matter- one obstacle c(wall on one side).
  if (L==1 && R==0 && F==1) c[2]=1;// 2 obstacle c-need to take a right.
  if (L==1 && R==1 && F==1) c[3]=1;// 3 obstacle c-need to go back.
}

int case_no(std:: vector<bool> &c){
  for(int i=0;i<4;i++){
    if(c[i]==1) {
      return i;
      break;
    }
      
    }
}

void action(int case_number){
  if(case_number==0){
   turn(left);
  straight(forward);
   
  }
  else if(case_number==1){
    straight(forward);
    
  }
  else if(case_number==2){. // current location is room[i][j]
    stop();
     if(state == "fr"){
  	  room[i-1][j]="w";j++;}
else if(state == "br"){
	    room[i+1][j]="w";j--;}
else if(state == "fc"){
      room[i][j+1]="w";i++;}
else  {room[i][j-1]="w";i--;}  //state was bc
  room[i][j]="w";
  }
    turn(right);
    
  }
  else{                 //case_number==3
     stop();
     if(state == "fr"){
  	  room[i-1][j]="w";room[i][j+1]="w";}
else if(state == "br"){
	    room[i+1][j]="w";room[i][j-1]="w";}
;}
else if(state == "fc"){
      room[i][j+1]="w";room[i+1][j]="w";}
;}
else  {room[i][j-1]="w";room[i-1][j]="w";}  //state was bc
  
    
    straight(backward);
    //
  }
}



